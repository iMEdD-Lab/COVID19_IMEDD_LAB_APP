// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/repo.go

// Package data is a generated GoMock package.
package data

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// RepoMock is a mock of Repo interface.
type RepoMock struct {
	ctrl     *gomock.Controller
	recorder *RepoMockMockRecorder
}

// RepoMockMockRecorder is the mock recorder for RepoMock.
type RepoMockMockRecorder struct {
	mock *RepoMock
}

// NewRepoMock creates a new mock instance.
func NewRepoMock(ctrl *gomock.Controller) *RepoMock {
	mock := &RepoMock{ctrl: ctrl}
	mock.recorder = &RepoMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RepoMock) EXPECT() *RepoMockMockRecorder {
	return m.recorder
}

// AddCase mocks base method.
func (m *RepoMock) AddCase(ctx context.Context, date time.Time, amount int, sluggedPrefecture string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCase", ctx, date, amount, sluggedPrefecture)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCase indicates an expected call of AddCase.
func (mr *RepoMockMockRecorder) AddCase(ctx, date, amount, sluggedPrefecture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCase", reflect.TypeOf((*RepoMock)(nil).AddCase), ctx, date, amount, sluggedPrefecture)
}

// AddFullInfo mocks base method.
func (m *RepoMock) AddFullInfo(ctx context.Context, fi *FullInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFullInfo", ctx, fi)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFullInfo indicates an expected call of AddFullInfo.
func (mr *RepoMockMockRecorder) AddFullInfo(ctx, fi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFullInfo", reflect.TypeOf((*RepoMock)(nil).AddFullInfo), ctx, fi)
}

// AddGeoRow mocks base method.
func (m *RepoMock) AddGeoRow(ctx context.Context, geoInfo GeoInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGeoRow", ctx, geoInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGeoRow indicates an expected call of AddGeoRow.
func (mr *RepoMockMockRecorder) AddGeoRow(ctx, geoInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGeoRow", reflect.TypeOf((*RepoMock)(nil).AddGeoRow), ctx, geoInfo)
}
